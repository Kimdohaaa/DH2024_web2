[메타 어노테이션 만들기]
1. 인터페이스로 정의한 타입
2. 목적 : 다형성 / 유지보수 / 리플렉션(런타임 중 컴파일 -> 동적처리)
3. 생성
    1. 어노테이션 생성 :
        @Retention()
            -> 어노테이션의 생명주기(유지기간)을 설정
            -> @RetentionPolicy(RetentionPolicy.SOURCE) : 컴파일 후 삭제
            -> @RetentionPolicy(RetentionPolicy.CLASS) : .class 파일에 포함 , 실행 중에는 사용
            -> @RetentionPolicy(RetentionPolicy.RUNTIME) : 실행 중 리플렉션 통해 사용

        @Target()
            -> 어노테이션을 적용할 수 있는 위치(대상) 설정
            -> @Target(ElementType.TYPE) : 클래스,인터페이스,열거형 타입 사용
            -> @Target(ElementType.FIELO) : 멤버변수에서 사용
            -> @Target(ElementType.METHOD) : 메소드에서 사용
            -> @Target(ElementType.PARAMETER) : 메소드 매개변수에서 사용
            -> @Target(ElementType.CONSTRUCTOR) : 생성자에서 사용
            -> @Target(ElementType.LOCAL.VARIABLE) : 지역변수에서 사용

        @interface 인터페이스명 {}

    2. 인터페이스 내 추상메소드 생성 : String value1();
        ★ 추상메소드 : 구현부없이 선언부만 작성하여 선언하는 메소드

    3. 선언한 어노테이션을 사용할 코드 위에 @생성한어노테이션명 으로 어노테이션 지정
         @Annotation1( )
         public void method(){}
    4. 어노테이션의 () 안에 속성 값을 대입
        @Annotation1(value1 = "value1 값 지정")
        public void method(){}
4. 상속과 어노테이션의 차이점
    => 상속      : 컴파일 시
    => 어노테이션 : 리플렉션 시 -> 동적 처리 가능
5. 리플렉션 클래스 정보 확인
    try{
       Method method = 확인할 클래스명.class.getMethod("확인할 메소드");
       어노테이션명 변수명 = method.getAnnotation(Annotation1.class);
       System.out.println(변수명.value1());
    }catch (Exception e){
       System.out.println(e);
    }


[SpringBootApplication 어노테이션 적용]

<매핑>
1. AppStart 클래스에서 @SpringBootApplication 어노테이션을 사용하여 SpringBoot 적용
    <SpringBootApplication 의 주요 어노테이션>
    1) @SpringBootConfiguration
        -> Spring 컨테이너(메모리) 에 bean(객체) 설정을 등록 => 제어의 역전
    2) @EnableAutoConfiguration
        -> Spring Boot 가 자동으로 필요한 bean(객체) 를 설정
        -> 웹 서버인 내장(Tomcat) 을 설정
    3) @ComponentScan
        -> 현재 클래스 기준으로 동일한 패키지 및 하위 패키지를 자동으로 스캔
        ★ 스캔 대상
            - @Component
            - @Controller
            - @RestController
            - @Service
            - @Repository
            - @Mapper
2. AppStart main 메소드 내에서 SpringApplication.run(현재클래스명.class)
    <기능>
    -> Spring 컨테이너(메모리) 초기화
    -> 자동 설정 적용
    -> 내장형 웹서버(Tomcat) 실행
3. Controller 로 사용할 클래스 위에 @Controller 어노테이션을 통해 해당 클래스가 Controller 임을 명시 , 기능 주입
    -> 해당 클래스는 Spring 컨테이너(메모리) bean(객체) 등록
    -> Spring Controller 는 기본적을 HTTP Servlet 을 지원하기 때문에 별도의 상속이 불필요

4. Controller 클래스의 main 함수 내 @RequestMapping 어노테이션을 통해 매핑
    방법_1)
        @RequestMapping(value= " HTTP 주소 " , method = RequestMethod.HTTP 메소드)
                                                                    -> GET
                                                                    -> POST
                                                                    -> PUT
                                                                    -> DELETE
    방법_2)
        @GetMapping("HTTP 주소")
        @PostMapping("HTTP 주소")
        @PutMapping("HTTP 주소")
        @DeleteMapping("HTTP 주소")

<어노테이션>
1. @ResponseBody : 자동으로 함수의 return 값을 반환 타입에 맞게 Response 함
    -> int, Map, boolean , DTO 등등 : 자동으로 함수 return 값을 application/json 타입으로 반환
    -> String : 자동으로 함수 return 값을 text/plain 타입으로 반환
    => ObjectMapper 라이브러리 불필요

★ @ResponseBody + @Controller => @RestController ★
    -> 동적 페이지(화면(=HTML)) 반환 : @Controller
        => @Controller 어노테이션 사용 시 반환 메소드 위에 @ResponseBody 어노테이션을 주입해야함
    -> REST(값(=JSON)) 반환 : @RestController
        => @RestController 어노테이션 사용 시 메소드 위에 @ResponseBody 어노테이션 생략가능

2. @RequestMapping() : 클래스 내 메소드들의 공통 URL 정의 시 클래스 위에 선언하여 사용

3. @XXXMapping() : ★ 메소드 전용 ★ 클래스 내 각 메소드들의 상세 URL 정의 시 해당 메소드 위에 선언하여 사용

4. @RequestParam : HTTP Request(요청) 의 URL 쿼리스트링 매개변수를 매핑하는 어노테이션(컬렉션프레임워크, 기본타입 등 공식 타입만 지원)
    -> RequestParam(name = "쿼리스트링의 매개변수명") 타입 매개변수명
    -> RequestParam(defaultValue = "" ) 타입 매개변수명 : 쿼리스트링에 매핑할 값이 없을 시 default 값 지정
    -> RequestParam(required = true) 타입 매개변수명 : 쿼리스트링 매개변수 필수여부 설정 (기본값 : true)
        => 쿼리스트링 매개변수가 존재하지 않을 시 400(bad request) 오류 응답
    ★ 쿼리스트링의 매개변수명과 함수매개변수명이 동일하면 @RequestParam 어노테이션 생략 가능 => 관례적으로 명시 ★
    ★ @RequestParam 의 근본 => @ModelAttribute (@ModelAttribute 는 @RequestParam 생략 시 자동 주입됨) ★

    <@RequestParam vs @ModelAttribute>
     명시해야함          생략가능(기본값)
     공식타입만 지원      개발자가 만든 타입도 지원
                       => DTO 등 사용 시 생략 또는 @ModelAttribute 사용
     쿼리스트링 지원      쿼리스트링 + form 첨부파일 지원

5. @RequestBody : HTTP REQUEST BODY 의 "application/json" 타입의 데이터를 자바타입으로 변환 / 매핑하는 어노테이션
    ★ 주의점 : @RequestBody 생략 시 @ModelAttribute 가 자동 주입 되므로 반드시 명시해야함 ★
     => @ModelAttribute 는 쿼리스트링만 지원
[REST]
- 정의 : 웹에 자원을 관리하는 아키텍쳐(설계 구조)
- 자원(Resource) / 행동 (Method) 표현 개념
- HTTP 프로토콜을 이용하여 클라이언트(유저) <-통신-> 서버(톰캣) 을 일관서 있게 유지 / 구성

[REST API]
- REST 아키텍쳐에 따른 API
- REST 기반의 웹 서비스 인터페이스를 구축하는 것
- HTTP 에 따른 요청을 통해 자원을 CRUD 할 수 있도록 함

[RESTFUL API]
- REST API 의 아키텍쳐를 올바르게 사용하는지에 대한 확인 / 개념
- 조건
    1) 일관성된 URL 사용
    2) 적절한 HTTP Method 사용 (POST, GET , PUT , DELETE)
    3) 소켓과 다르게 무상태성 유지
    4) 응답 데이터는 주로 JSON / XML 을 제공

[IOC (Inversion of Control) (=제어의 역전)]
1. 정의 : 객체의 생성 및 관리의 제어권을 개발자가 아닌 스프링 프레임워크가 담당
    => 객체관리를 스프링이 함
2. 컨테이너 등록 방법
    => @Component / @RestController / @Service / @Repository / @Mapper 등등

[DI (Dependency Injection) (= 의존성 주입)]
1. 정의 : 객체를 직접 생성하지 않고 외부(스프링 컨테언) 로부터 주입
    => 객체들간의 결합도를 낮추고 유지보수성을 향상 시킴
2. 주입 방법
    => @Autowired
    주입위치_1) 필드(멤버변수)에 주입
        @Autowired 클래스명 변수명;
    주입위치_2) 생성자에 주입 -> 공식적으로 권장하는 방법(final 을 제공하기 때문)
        final 클래스명 변수명
        @Autowired 클래스명 (클래스명 매개변수명){
            this.변수명 = 매개변수명;
        }
    주입위치_3) Setter 에 주입
        클래스명 변수명;
        @Autowired
        public void setXXX(클래스명 매개변수명){
            this.변수명 = 매개변수명;
        }

★ Spring 은 IOC 를 이용하여 객체를 개발자 대신 생성 / 관리하고 DI 를 이용하여 객체를 주입한다. ★

[HTTP 주요 어노테이션 모음 / 정리]
=> Spring Web 에서는 REST 관련 어노테이션을 지원함

1. @Controller      : HTTP 요청 처리 (주로 HTML 반환 시 사용)
2. @RestController  : HTTP 요청 / 응답 처리 (주로 @ResponseBody 가 포함되어 JSON 응답 시 사용)
3. @RequestMapping  : HTTP URL 매핑 (주로 공통 URL 정의 시 클래스 위에 주입하여 사용)
4. @PostMapping     : HTTP POST 요청 매핑   (C / insert)
5. @GetMapping      : HTTP GET 요청 매핑    (R / select)
6. @PutMapping      : HTTP PUT 요청 매핑    (U / update)
7. @DeleteMapping   : HTTP DELETE 요청 매핑 (D / delete)
8. @ResponseBody    : HTTP 응답을 JSON 으로 자동 형 변환하여 응답  (@RestController 에 포함되므로 생략 가능)
9. @RequestParam    : HTTP 쿼리스트링 / form-Data 에서 기본 타입 / 공식 타입 의 값을 매핑 시 사용
10. @RequestBody    : HTTP BODY "application/json" -> 자바 객체의 값으로 매핑 시 사용
    => 생략 시 @ModelAttribute 가 자동 주입되므로 반드시 명시
11. @ModelAttribute : HTTP 요청 매핑의 기본 어노테이션으로 생략 가능 / 쿼리스트링 매핑 시 사용

    <관례적 사용처>
    -
    @RequestMapping (공통 URL) || @XXXMapping(특정 URL)
    -
    @RequestParam (쿼리스트링) || @RequestBody(BODY) || @ModelAttribute (form-data)
    -
    @Controller (페이지 (HTML / JSP) 반환) || @RestController (Resources / JSON / 값 반환)


[그 외 어노테이션]
1. @Component : Spring 컨테이너(메모리) 에 bean(인스턴스) 를 등록하는 어노테이션
    -> bean : 컨테이너(메모리) 에서 관리하는 인스턴스/객체 => IOC
    -> IOC(제어의 역전) : 개발자가 인스턴스를 생성하지 않고 Spring 이 대신 인스턴스를 생성함

2. @Autowired : Spring 컨테이너(메모리) 에 등록된 bean(인스턴스) 를 주입하는 어노테이션 => DI
    -> 개발자가 인스턴스를 생성하지 않고 @Autowired 어노테이션을 통해 인스턴스를 주입하여 사용
=> 싱글톤 대신 @Component 와 @Autowired 를 사용하여 인스턴스를 사용할 수 있음

3. @Service : @Component 어노테이션 포함된 어노테이션


[상수]
1. final : 필드 / 변수가 초기화 이후 변경 불가한 상태로 지정하는 키워드
2. final static : 전역상수

[자주 발생하는 오류]
1. consider definding a bean of type 'XXX' in your configuration
    -> bean 주입이 안되는 오류 발생 (어노테이션 주입 확인하기)
2. The dependencies of some of the beans in the application context form a cycle
    예] Controller 와 Service 둘 다에 @AutoWired 가 적용되어 있어 서로 호출하여 순환참조 오류 발생


[DB 연동 방법]
1. DAO (JDBC)
    - 자바에서 DB 와 상호작용하기 위한 java 표준 라이브러리
    - SQL 을 직접 작성하고 실행하며 DB 연결 / 관리
    - 주요 인터페이스
        1) Connection : DB 연결관리
        2) PreparedStatement : SQL 실행과 매개변수 관리
        2) ResultSet : SQL select 문 실행 결과 관리
2. MyBatis
    - JDBC 보다 더 다양한 기능을 제공하는 프레임워크
    - 객체와 DB 간의 매핑을 자동화
    - 주요 특징
        1) SQL 코드를 XML 파일에 작성하여 자바 객체와 매핑
        2) SQL 결과를 자동으로 자바 객체로 자동 타입변환
        3) 유연성이 있기 때문에 복잡한 쿼리와 제어 가능
        4) Spring 과 통합 가능
    - MyBatis 로 DB 연동
        1) 프로젝트 내 MyBatis , JDBC 라이브러리 build
        2) application.properties (Spring 프레임 워크가 실행될 때 읽어들이는 설정 파일) 에서 DB 연동
            ★ 주의점 : 위치는 resources 폴더 하위에 존재해야 인식됨 ★
            -> DB 연동 : spring.datasource.url =jdbc:mysql://localhost:포트번호/연동할 DB 명
            -> DB 계정 연동 : spring.datasource.username =계정명
            -> DB 비밀번호 연동 : spring.datasource.password =비밀번호
            ★ ! 주의점 : 이퀄 뒤에 띄어쓰기도 인식하므로 띄어쓰지 말기 ! ★
        3) .XML 파일이 존재하는 경로 설정 : MyBatis 는 XML 파일을 이요하여 자바 객체와 매핑하기 때문
            ★ 주로 resource 폴더 하위에서 작업 ★
            -> mybatis.mapper-locations = classpath:resources 의 mybatis 폴더 경로/*.xml
    - 자바와 매핑하기
        1) 설정한 MyBatis xml 파일 경로에 .xml 확자자를 가진 파일 생성
        2) XML 파일 상단에 MyBatis 연동 코드 작성
            연동코드 :<?xml version="1.0" encoding="utf-8"?>
                     <!DOCTYPE
                     mapper
                     PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN"
                     "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
        3) 해당 XML 과 연동할 인터페이스명 설정
            ★ 주의점 : 매핑할 인터페이스명이 위치한 경로까지 포함 ★
            연동코드 : <mapper namespace="자바 하위부터 설정할 인터페이스까지의 경로">
                     예] "example.day03.mvc2_mybatis.model.MyMapper"
        4) <mapper> </mapper> 사이에 SQL 마크업을 이용하여 SQL 작성
            - XML 은 마크업 언어로  DML 마크업을 지원함
                <insert> </insert>
                <select> </select>
                <update> </update>
                <delete> </delete>
            - XML 은 쿼리의 매개변수를 지원함
                <마크업명 id="인터페이스내 매핑할 함수" parameterType="사용할 매개변수의 경로 / 기본자료형 사용 시 자료형"
                                                resultType="리턴값의 타입 경로 / 기본자료형 일 시 자료형">
                    #{매개변수명}
                </마크업명>
                ★ 주의점 : 매개변수로 받은 DTO 에 존재하지 않은 변수는 사용불가 / DTO 내 변수명과 동일하게 작성해야함 ★
                ★ int 는 resultType 의 기본값으로 리턴값이 int 일 경우 resultType 생략가능 ★


[MyBatis 라이브러리 설치]
- start.spring.io 에서 MyBatis add 후 해당 코드 build.gradle 에 붙여넣기
[JDBC 라이브러리 설치]
- start.spring.io 에서 MysqlJDBC add 후 해당 코드 build.gradle 에 붙여넣기 (Spring 말고 그냥 JDBC)




































