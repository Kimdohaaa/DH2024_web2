[디자인 패턴]
- 정의 : 개발에서 자주 발생하느 문제(코드복잡도 등) 들을 해결하기 위한 방법
- 종류
    1) 싱글톤 패턴 : 프로그램 내 하나의 객체가 존재해야되는 경우 사용
    2) MVC 패턴 : Model / View / Controller 로 나누어 관리하는 경우 사용
    3) 팩토리 패턴 : 객체를 직접 생성하지 않고 메모리를 생성하고 관리하는 경우 사용
        예] 스프링 컨테이너(팩토리)에 빈 등록
    4) 빌더 패턴 : 복잡한 객체 생성(생성자를 이용한 객체 생성)을 유연하게 생성할 경우 사용
        -> lombok 에서 지원하는 @Builder 어노테이션을 주입하여 사용
        -> StringBuilder

[@Builder]
- 정의 : 롬복 라이브러리에서 제공하는 빌더 패턴
- 목적
    1) 복잡한 객체 생성 단순화
    2) 가독성 향상
    3) 협업 시 매개변수를 공유하지 않아도 되기 때문에 복잡도 감소
- 주요 메소드
 1) .builder() : 빌더 객체 생성 함수
 2) .필드명(초기값) : 해당 필드에 값 지정
 3) .build() : 최종적으로 객체 생성