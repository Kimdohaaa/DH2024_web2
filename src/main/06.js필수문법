[1] 변수 와 상수
const : 상수 키워드
let : 변수 키워드
var : let 이 나오기 전 사용하던 변수 키워드 (변수들 간의 변수명 중복 가능)

[2] 함수
2-1) 함수 선언
- 기본 함수 : function 함수명 (매개변수1, 매개변수2) {실행코드}
- 익명 함수 : function (매개변수1, 매개변수2) => {실행코드}
- 화살표, 람다식 함수 : (매개변수1, 매개변수2) => {실행코드}
=> 익명 함수 / 화살표 , 람다식 함수는 주로 변수 , 상수에 저장하여 사용 
=> 매개변수 선언 시 기본값 지정 가능
=> 스프레드 연산자(...)를 통해 나머지 매개변수 사용 가능 (사용 시 매개변수 가장 마지막에 선언해야 함)

2-2) 함수 호출
함수명(인자값1, 인자값2)

[3] 객체
- 객체 { key : value }: key 와 value 가 entry 로 구성
- 속성명(key) 단축 {value, value, value} : value 의 변수명을 속성명과 동일하게 선언 시 사용
- 속성값 호출 .속성명 : .(접근연산자)를 이용하여 객체 내 속성 값 호출 

[4] 리스트
- 리스트 [value, value]
- 리스트 내 값 호출 : [인덱스]

[5] 스프레드 연산자(...) 
- 배열이나 객체를 복사하거나 합칠 때 사용
const 배열명 = [...배열명, value1, value2]
- 기존 객체와 새로운 속성으로 새로운 객체 선언
const 객체명 = {...객체명, key : value}


[6] 구조 분해 할당
- 배열 / 객체를 분해하여 각 변수에 저장
const {key1, key2} = {key1 : value1, key2 : value2}
객체 : const {key,...keys} = {key1 : value1 , key2 : value2}
배열 const [value,...value] = [value1 , value2]

[7] 나머지 연산자(...)
- 매개변수를 한번에 받을 시 사용 : (param1, ...param2)
- 구조 분해 할당 시 사용
★ 주의저 ㅁ: 나머지 연산자 사용 시 마지막 위치에 선언해야 함

[8] 백틱(``)
- 문자열 템플릿
- 표현부(삼항연산자 / 변수호출 / 함수호출 / 객체호출 등)만 가능 (선언부(함수선언 / for 문 등) 불가능)

[9] 삼항연산자
- 조건 ? true 코드 : false 코드

[10] 단축 평가 
- 조건(A) && true 코드(B) : 만약 조건이 true 이면 B 반환 false 면 A 반환
- 조건(A) || false 코드(B) : 만약 조건이 true 이면 A 반환 false 면 B 반환  

[11] 동기 통신 / 비동기 통신
- 동기 통신 : 요청 후 응답이 올 때까지 대기 
- 비동기 통신 : 요청 후 응답을 기다리지 않고 다음 코드 진행

[12] for 문
- 일반 for 문 : for(let 변수명 = 0 ; 변수명 < 배열명 ; 변수명++){반복 코드}
- 향상된 for 문 : for(let 변수명 in/of 배열명){반복 코드}
    => in : 인덱스 순회
    => of : 원소 순회
- forEach() : 배열명.forEach((변수명) => {반복코드})
- map() : 배열명.map((변수명) => {반복코드})
    => return 가능
- filter() : 배열명.filter((변수명) => {return 조건코드})
※ (변수명, 인덱스) : 원소값 , 인덱스 순회