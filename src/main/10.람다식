[람다식]
- 정의 : 익명함수를 간결하게 표현하는 방법 -> JS 의 화살표함수와 비슷
- 자바 8 버전 이상부터 지원
- 목적
    1) 가독성 향상
    2) 간결한 코드 작성 가능
    3) 스트링 API / java GUI 등에서 많이 사용
- 주요 함수형 인터페이스
    1) Function 인터페이스
        => 선언 : Function<매개변수타입, 리턴타입> 변수명 = 매개변수 -> 구현코드 ;
        => 사용 : .apply(인자값) 메소드를 통해 매개변수를 받고 메소드 실행 후 결과 반환
    2) Predicate 인터페이스
        => 선언 : Predicate<매개변수타입>  변수명 = 매개변수 -> 구현코드 : 구현코드의 실행결과를 boolean 타입으로 반환
        => 사용 : .test(인자값) 메소드를 통해 매개변수를 받고 메소드 실행 후 결과를 boolean 타입로 반환
    3) Supplier 인터페이스
        => 선언 : Supplier<리턴타입>  변수명 = () -> 구현코드 ;
        => 사용 : 제네릭타입에 리턴타입만 입력하고 매개변수가 없기 때문에 .get() 메소드를 통해 반환만 가능
    4) Consumer 인터페이스
        => 선언 : Consumer<매개변수타입> 변수명 = 매개변수 -> 구현코드 ;
        => 사용 :.accept(인자값) : 매개변수를 전달하여 메소드 실행
- 람다표현식 사용예시_1 : 추상메소드와 같이 사용
    예]
    // (1) 인터페이스 선언
    interface 인터페이스명 {
        // (2) 추상메소드 선언
        반환타입 추상메소드명(매개변수타입);
    }

    main{
    // (3) 람다표현식으로 추상메소드 정의
        (매개변수) -> {구현코드};
    }
- 람다표현식 사용예시_2 : 컬렉션 프레임워크와 같이 사용
    예] 리스트명.forEach(() -> {})