[AOP (Aspect-Oriented Programming)]
- 관점 지향 프로그래밍 : 핵심 로직과 공통 기능을 분리하는 프로그래밍 기법
- 목적
    1) 여러 메소드에서 *중복* 되는 코드들을 공통 기능으로 분리하여 필요 시 *자동* 으로 실행하기 위함
    2) 핵심 로직을 깔끔하게 유지 / 공통 기능 한 곳에서 관리 -> 유지보수 용이
- 공통 기능
    1) 로그 처리 : 기능 실행에 대한 기록 남기기
    2) 트랜젝션
    3) 보안 검사
    ~~~ 등등 ~~~
- 적용 방법
    1) build.gradle : implementation 'org.springframework.boot:spring-boot-starter-aop' 추가
    -> AOP 는 Spring 이 기본적으로 제공하지만 사용자 정의 AOP 를 사용하기 위해서는 라이브러리 추가 필요
- 사용방법
    1) build.gradle 에 라이브러리 추가
    2) 모듈화하고자 하는 클래스에  @Aspect 어노테이션 주입
    3) 모듈함수에 어노테이션 주입
        1_@Before
            -> 메소드 실행 전 실행
            -> 목적 : 매개변수 검사 / 로그처리 / 보안
            -> 매개변수 O
        2_@After
            -> 메소드 실행 후 실행 => 예외여부와 상관없이 무조건 실행
            -> 목적 : 외부연결해제 시 / 로그처리
            -> 매개변수 O
        3_@AfterThrowing
            -> 메소드 실행 중 예외 발생 시 실행 => 조건에 따라 실행
            -> 목적 : 예외로그 / 트랜젝션 롤백
            -> 리턴 O
        4_@AfterReturning
            -> 메소드 정상적으로 실행된 후 실행 => 조건에 따라 실행
            -> 목적 : 로그처리 / 캐시기록
            -> 예외값 O
        5_@Around
            ->메소드 실행 전 , 후 실행
            -> 목적 : 성능평가 / 모니터링 / 트랙젝션
            -> 모든 값 받아오기 가능
    4) @실행순서어노테이션(???)
        1_("execution 리턴타입")
            -("execution(*)") : 모든 리턴 타입
            -("execution (int))") : 해당 함수의 리턴 타입은 int
        2_("execution (리턴패키지명.클래스명.함수명)")
            예] ("execution (리턴타입 클래스명.함수명)") : 동일 패키지 일 경우 경로 생략 가능
            예] ("execution (리턴패키지명.클래스명.함수명)") : 다른 패키지 일 경우
            예] ("execution (*.클래스명.*)") -> 모든 타입 리턴 / 동일패키지 클래스에 적용 / 모든 메소드에 적용
        3_("execution ( 리턴타입 리턴패키지명.클래스명.함수명(매개변수타입))")
            -("execution ( 리턴타입 리턴패키지명.클래스명.함수명(..))") -> 모든 매개변수 타입
            -("execution ( 리턴타입 리턴패키지명.클래스명.함수명(int))") -> int 매개변수 타입
            -("execution ( 리턴타입 리턴패키지명.클래스명.함수명(int,boolean))") -> int , boolean 매개변수 타입
        4_("execution ( 리턴타입 리턴패키지명.클래스명.함수명(매개변수타입)) && args (매개변수명)")
            ★ args (arguments) : 매개변수 ★
        5_("execution (value = "execution (리턴타입 리턴패키지명.클래스명.함수명(매개변수타입))", returning="매개변수명")


[ProceedingJoinPoint]
-> AOP 에서 사용하는 인터페이스
-> 제공하는 메스드
    1) .proceed() : 지정한 메소드를 실행하는 메소드
    2) .getArgs() : 지정한 메소드이 매개변수를 배열타입으로 반환
    3) .getSignature() : 지정한 메소드의 시그니처(함수명/리턴타입/매개변수) 반환
    4) .getTarget() : 지정한 메소드를 실행한 인스턴스 객체 반화