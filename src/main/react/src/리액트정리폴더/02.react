[react]
- React == React.js
- 페이스북에서 개발한 JS 라이브러리
- 과거에는 jQuery / Angular.js(구글) 를 많이 사용
- 현재는 React.js / Vue.js(카카오) 를 많이 사용
- React 는 SPA 사용 
    => SPA 의 단점을 보완하기 위해 next.js(CSR 제공) 같은 기술을 활용하여 보완
- 목적 : JS 에서 지원하지 않는 효율적이고 편한 UI(인터페이스) 를 제공받기 위함
    -> frontEnd 기술은 트렌드에 따라 빠르게 바뀜 => 디바이스(모니터)가 빠르게 변화하기 때문
- 특징
    1) 컴포넌트 기반 : 화면을 작은 단위로 나눠서(모듈화) 재사용 가능
    2) 가상 DOM : 실제 DOM 을 조작하지 않고 가상 DOM 을 만들고 진짜 DOM 으로 성능 최적화
    3) 단방향 데이터 흐름 : 부모 -> 자식 방향으로 구조화
    4) 선언적 코드 : HTML 을 가상으로 조작하여 JS 형식의 코드로 표현
    5) 훅 지원 : 다양한 함수/라이브러리 지원
- 사용처 : 웹 (React) / 앱 (React Native)
★ 주의점 : 빠르게 변화하기 때문에 버전에 따라 문법의 차이 크기 때문에 버전 주의 (강의 : 18.X 버전 사용) ★


[SPA / MPA]
- SPA(Single Page Application) : 한개의 HTML / 주로 CSR
    => 클라이언트에서 페이지 전환
    => 페이지 전환 시 서버와 통신하지 않기 때문에 부드러움
    => 장점 
        1) 빠른 페이지 로드 속도
        2) 서버 요청이 적음 -> 성능 부담이 적음 
    => 단점 
        1) 느린 최초 페이지 로드 속도
        2) 검색 최적화(=SEO)에 불리 => 검색의 경우 데이터가 실시간으로 변화하기 때문
- MPA(Multi Page Application) : 여러개의 HTML (예] JSP) / 주로 SSR
    => 서버에서 페이지 전화
    => 페이지 전환 시 서버와 통신하므로 재로드됨
    => 장점
        1) 빠른 최초 페이지 로드
        2) 검색 최적화
    => 단점
        1) 느리 페이지 로드 속도
        2) 서버 요청이 많음 => 성능 부담 증가


[SSR] : 서버 사이드 렌더링 -> 서버가 페이지를 전환 / 생성 / 반환
[CSR] : 클라이언트 사이드 렌더링 -> 클라이언트가 페이지를 전환 / 생성 / 반환


[React 설치]
1. node.js 설치(강의 기준 : (LTS)v22.14.0) : https://nodejs.org/ko
    <node.js : 웹 브라우저 밖에서 JS 코드 실행이 가능한 엔진>
    => node.js 출시 전 : JS 는 HTML 에 종속되어 HTML 브라우저 없이 실행 불가
    => node.js 출시 후 : 브라우저의 엔진을 사용하므로 HTML 에 종속되지 않고 자체적인 JS 실행이 가능해짐
2. [Next] -> [I accept] -> [Next] -> ... -> [Install] -> [Finish]
3. 설치 확인 : 
    cmd(명령 프롬포트) 에 확인 
    1) node -v
    2) npm -v
    3) npx -v

1. React 설치 (강의 기준 : Spring 프로젝트명 -> src -> main 폴더 내 설치)
    1) scr -> main -> 오른쪽 클릭 -> 통합 터미널 열기
    2) npm create vite@latest 프로젝트명 --template react
    ★ 오류 시
        1) VScode 재 실행 
        2) Set-ExecutionPolicy RemoteSigned -Scope CurrentUser 명령어를 입력해 PowerShell 실행 정책을 관리자 권한으로 변경
    3) Ok to proceed? (y) -> y 입력 후 엔터
    4) Select a framework -> 키보드 방향키를 이용하여 아래로 내려가서 리액트에서 엔터
    5) Select a variant -> 키보드 방향키를 이용하여 JavaScript + SWC 에서 엔터
    6) Done. Now run 

2. React 실행
    1) 리액트 프로젝트 폴더명으로 이동
        방법_1 : cd 이동할 폴덩명 -> cd 폴더명으로 이동 
        - 상위 폴더로 이동 : cd..
        - 하위 폴더로 이동 : cd 이동할 폴더명
        방법_2 : 리액트 폴더 오른쪽 클릭 -> [통합 터미널 열기]
    2) 패키지(라이브러리) 설치 및 업데이트 (최초 설치 / 최초 git clone 시 1번 진행)
        npm install ★ 주의점 : 리액트가 설치된 폴더 내에서 진행
    3) 리액트 실행 방법
        npm run dev ★ 주의점 : 리액트가 설치된 폴더 내에서 진행
3. React 종료 방법
    방법_1 : 터미널에서 ctrl + c
    방법_2 : 터미널 종료
    방법_3 : VScode 종료

[npm(node package manager)]
- 정의 : node.js 기반의 라이브러리(패키지)를 관리해주는 프로그램
- 추후 React 관련 라이브러리 설치 시 https://www.npmjs.com/ 에서 설치 가능
- dependencies : 리액트프로젝트명 -> package.json 에 로드 됨
1) npm install : package.json 내 정의된 라이브러리들을 설치 / 재로드
2) npm run dev : React 실행
3) npm install XXX : 외부 라이브러리를 프로젝트 내에 설치

[React 의 패키지 구성]
★ 리액트의 역할 : jsx -변환-> HTML ★
/리액트프로젝트명(강의기준 : reactapp)
    -> node_modules : 현재 프로젝트에 설치된 라이브러리 (자동생성 / git에 업로드 X(ignore 에 자동으로 포함되어 업로드되지 않음))
    -> public       : 주로 정적파일이 포함된 파일 (예] img , icon 등) 
    -> src          : 주로 동작파일이 포함된 파일 -> 코드파일로 해당 위치에 코드작성
        -> components : 재사용 가능한 컴포넌트의 모음
        -> pages      : 개별 페이지 컴포넌트의 모음
        -> assets     : 주로 이미지 , 폰트 ,  css 등의 정적 리소스의 모음
        -> index.css  : 기본 스타일
        -> App.jsx    : 최상위 컴포넌트
        -> ★ main.jsx ★ : 최상위 컴포넌트를 index.html 에 렌더링하는 파일
    -> index.html   : root 파일 -> React는 SPA(싱글페이지)이므로 HTML 1 개만 사용 
    -> package.json : 현재 프로젝트의 설정 / 라이브러리 의존성이 포함된 파일 ※ 중요 ※

[React 작동원리]
※ src 폴더의 하위 폴더에 생성 ※
1. index.html 에서 <div id="root"></div> 부여 
2. main.jsx 에서 creatRoot(document.getElementById("#id")) 를 통해 <div id="root"></div> 위치 렌더링
    -> 브라우저는 jsx 를 모르기 때문에 HTML 문법으로 변환
3. main.jsx 에서 .render(JSX 형식 컴포넌트) 를 통해 지정한 JSX 컴포넌트를 HTML 로 변환하여 ROOT 에 대입
    -> .innerHTML : 지정한 위치에 HTML 문자열 대입
    -> .render(JSX 컴포넌트) : 지정한 위치에 JSX 컴포넌트 대입 -> 브라우저는 JSX 해석불가 (렌더링 필요 -> React 가 자동으로 렌더링)
<흐름>
index.html 의 root <-> main.jsx 의 </App> 을 html 에 렌더링 <-> <App/> : App.jsx 

[컴포넌트 생성]
    1. 지정한 폴더에 첫글자를 대문자로 하는 .js / .jsx(권장) 확장자를 가지 파일 생성
    2. 함수형 컴포넌트(권장) / 클래스형 컴포넌트 생성
        ★ 컴포넌트의 첫글자는 대문자! ★
        ★ 컴포넌트의 매개변수로 props 필수로 선언 ★
    3. return 에서 jsx(HTML + JS) 문법을 활용하여 화면 구현
        ※ JSP : HTML + JAVA ※
    4. 함수형 컴포넌트 반환
    5. main.jsx 소스파일에서 const root = creatRoot(~~~) 를 통해 index.html 의 root 구역 가져오기
    6. main.jsx 소스파일에서 import 생성한 컴포넌트명 from `해당 컴포넌트경로` 를 통해 컴포넌트 가져오기
    7. main.jsx 에서 root.render(<렌더링할 컴포넌트명/>)을 통해 index.html 에 JSX 를 HTML 로 렌더링