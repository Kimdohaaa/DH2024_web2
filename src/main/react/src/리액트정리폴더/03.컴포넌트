[컴포넌트]
- 컴포넌트 : UI 를 구성하는 독립적인 재사용 가능한 작은 단위
- HTML + CSS + JS 를 하나의 파일로 관리가 가능 -> 유지보수 용이

[JSX]
- JS 코드 안에서 HTML 과 비슷한 문법을 사용할 수 있도록 만든 확장 문법
- 브라우저가 JSX 를 이해 X -> 리액트를 통한 렌더링 필요
- 특징 
    1) JSX 는 HTML 처럼 보이지만 HTML 과 다르다.
        => 카멜표기법 사용
        => HTML 보다 유효성이 강력하기 때문에 마크업 close(</>) 필수 !
    2) JSX 는 반드시 전체를 감싸는 상위 요소가 필수
        => 예] 내용 -> 불가 / <div> 내용 </div> -> 가능
        => < > </> 등 의 이을없는 마크업으로도 감싸기 가능
    3) JSX 는 두 줄 이상의 문법 작성 시 () 를 통해 감싸서 작성
        => 예] return (
                    <div>
                        내용물
                    </div>
                )
    4) JSX 문법에서 JS 표현식 가능
        => 주의점 : 표현부는 가능하지만 선언부(함수선언,변수선언 등)는 불가능
        => 예] return <div> {10 + 5} </div>
    5) JSX 의 주석 : {/* 주석 내용 */} 


[JSX 생성]
1. 확장자가 .jsx 인 파일 생성
2. 함수 생성 : function 함수명(props){ }
    => props 매개변수 필수
3. 생성한 함수 내에서 return 에 JSX 문법 작성
4. .JSX 파일 내 기본적으로 import 반환할 컴포넌트 함수를 정의
    => 함수명 앞에 export default 를 통해 함수 생성과 반환을 동시에 가능


[props(컴포넌트의 매개변수)]
- 부모의 컴포넌트로부터 자식 컴포넌트에게 데이터를 전달하는 방법
- 특징
    1) 자식은 전달 받은 props(매개변수) 를 읽기만 가능 => props(매개변수) 수정 불가능
- 사용법
    function 부모컴포넌트(props){
        return (<> <자식컴포넌트호출 속성명={값}/></>)
     }

     function 자식컴포넌트(props){
        // 부모컴포넌트가 보낸 인자값을 props 매개변수로 받음
     }
    