[MVC 패턴]
1. 정의 : 소프트웨어 공학에서 사용하는 디자인 패턴 중 하나
2. 목적 ; 프로그램을 깔끔하고 효율적으로 만드릭 위해 사용되는 설계 방법
3. 종류
    1) MVC1 : Controller(제어) + view(화면)
        -> JSP 파일에서 화면(HTML)과 제어(로직) 을 한번에 작성하는 방법
        -> 장점 : 빠른 개발
        -> 단점 : 유지보수와 역할 분담이 어렵다. ( 과거에 주로 사용 )
        <흐름도>
        View/Controller <-Model(DTO)-> DAO
    2) MVC2 : Controller(Servlet) 과 view(화면)을 분리
        -> JSP 파일에서는 단순 화면(HTML) 구현 / Servlet 에서 제어(로직)을 작성하는 방법
        -> 장점 : 로직과 화면 분리
        -> 단점 : 클래스 , 파일의 수 가 많아진다. ( node.js 출시 후(2010년 이후) 부터 주로 사용 )
        <흐름도>
        View(JSP/JS) <--Model(DTO)-> Controller(Servlet) <-Model(DTO)-> DAO
    3) MVC2 3Tire : Controller 를 Controller 와 service 와 DAO(=Repository) 분리
        -> Controller 에 역할을 조금 더 세분화하여 분리하여 작성하는 방법( Spring 프레임워크 / 대규모 프로젝트에서 사용 )
        -> 장점 : 역할에 대한 분업 등의 유지보수가 편리하고 확장성이 좋음
        -> 단점 : 클래스 , 파일 수가 많아져 파일관리의 복잡도가 높아진다.
        <흐름도>
        View( JSP(Spring 에서 지원 X)/Thymeleaf/Mustache(Spring 공식 템플릿)/react(현재 트렌드))
            <-Model(DTO)->
        Controller( Spring 에서 지원하는 @RestController / @Controller ) : HTTP Request 와 Response / 유효성 검사 를 주로 담당
            <-Model(DTO)->
        Service( Spring 에서 지원하는 @Service) : 비즈니스 로직을 담당(CRUD/데이터 검증/연산/알고리즘/트랜젝션 기능 수행)
            <-Model(DTO)->
        Dao(=Repository)( Spring 에서 지원하는 @Repository ) : DB 와 연동하여 SQL 처리를 담당
5. Spring 프레임워크에서 공식적인 MVC 패턴 지원
    ★ JVM 아키텍쳐 / Spring 아키텍쳐 / TomCat 아키텍쳐 공부하기 ★
    1) View : src -> main -> resource 폴더 내 모든 파일을 자동으로 View 로 인식
        <resource 폴더>
            - static(정적) 폴더    : Spring 은 정적 파일들을 자동으로 static 에서 찾음
                * 정적 파일 : HTML / CSS / JS / IMG 등
            - templates(동적) 폴더 : Spring 은 동적 파일들을 자동으로 templates 에서 찾아 렌더링(HTML 반환)
                * 동적 파일 : JSP / Thymeleaf / Mustache / react / vue.js 등
    2) Controller : Spring 은 시작과 동시에 @RestController 와 @Controller 가 주입된 클래스들을 스캔(탐색) 하여 컨테이너에 등록
    3) Service : Spring 은 시작과 동시에 @Service 가 주입된 클래스들을 스캔(탐색) 하여 컨테이너에 등록
    4) DAO(Repository) : Spring 은 시작과 동시에 @Repository 가 주입된 클래스들을 스캔(탐색) 하여 컨테이너에 등록

    => Spring : enterprise(대규모) 소프트웨어를 제공 => 모두 지원하기 때문

[Spring MVC2 3Tire 패키지 구조]
프로젝트명
    -> src
        -> main
            -> java
                -> 패키지명(관례적으로 홈페이지 명 사용) ★ 주의점 : 최소 1개 이상의 패키지 생성 ★
                    -> AppStart 클래스 ★ 주의점 : 가장 상단에 위치 ★
                    -> Service 패키지
                    -> Model 패키지
                        -> DAO 패키지
                        -> VO 패키지          : Value Object 로 수정 불가능한 객체
                        -> Entity 패키지      : 매핑 객체
                        -> Repository 패키지  : DB 매핑 인터페이스
                    -> Controller 패키지
                    -> Config 패키지          : 설정 패키지

흐름
    1) AppStart 의 @SpringBootApplication 어노테이션이 각 @Controller / @Service 를 컨테이너(메모리)에 등록
    -> Request : AppStart -> Controller -> Service -> Repository -> DB
    -> Response : DB -> Repository -> Service -> Controller -> View



[DB 연동 방법]
1. DAO (JDBC)
    - 자바에서 DB 와 상호작용하기 위한 java 표준 라이브러리
    - SQL 을 직접 작성하고 실행하며 DB 연결 / 관리
    - 주요 인터페이스
        1) Connection : DB 연결관리
        2) PreparedStatement : SQL 실행과 매개변수 관리
        2) ResultSet : SQL select 문 실행 결과 관리
2. MyBatis
    - JDBC 보다 더 다양한 기능을 제공하는 프레임워크
    - 객체와 DB 간의 매핑을 자동화
    - 주요 특징
        1) SQL 코드를 XML 파일에 작성하여 자바 객체와 매핑
        2) SQL 결과를 자동으로 자바 객체로 자동 타입변환
        3) 유연성이 있기 때문에 복잡한 쿼리와 제어 가능
        4) Spring 과 통합 가능
    - MyBatis 로 DB 연동
        1) 프로젝트 내 MyBatis , JDBC 라이브러리 build
        2) application.properties (Spring 프레임 워크가 실행될 때 읽어들이는 설정 파일) 에서 DB 연동
            ★ 주의점 : 위치는 resources 폴더 하위에 존재해야 인식됨 ★
            -> DB 연동 : spring.datasource.url =jdbc:mysql://localhost:포트번호/연동할 DB 명
            -> DB 계정 연동 : spring.datasource.username =계정명
            -> DB 비밀번호 연동 : spring.datasource.password =비밀번호
            ★ ! 주의점 : 이퀄 뒤에 띄어쓰기도 인식하므로 띄어쓰지 말기 ! ★
        3) .XML 파일이 존재하는 경로 설정 : MyBatis 는 XML 파일을 이요하여 자바 객체와 매핑하기 때문
            ★ 주로 resource 폴더 하위에서 작업 ★
            -> mybatis.mapper-locations = classpath:resources 의 mybatis 폴더 경로/*.xml
    - 자바와 매핑하기
        [XML 소스파일 사용]
            - 주로 복잡한 SQL 문 작성 시 사용
            1) 설정한 MyBatis xml 파일 경로에 .xml 확자자를 가진 파일 생성
            2) XML 파일 상단에 MyBatis 연동 코드 작성
                연동코드 :<?xml version="1.0" encoding="utf-8"?>
                         <!DOCTYPE
                         mapper
                         PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN"
                         "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
            3) 해당 XML 과 연동할 인터페이스명 설정
                ★ 주의점 : 매핑할 인터페이스명이 위치한 경로까지 포함 ★
                연동코드 : <mapper namespace="자바 하위부터 설정할 인터페이스까지의 경로">
                         예] "example.day03.mvc2_mybatis.model.MyMapper"
            4) <mapper> </mapper> 사이에 SQL 마크업을 이용하여 SQL 작성
                - XML 은 마크업 언어로  DML 마크업을 지원함
                    <insert> </insert>
                    <select> </select>
                    <update> </update>
                    <delete> </delete>
                - XML 은 쿼리의 매개변수를 지원함
                    <마크업명 id="인터페이스내 매핑할 추상메소드 명"
                                            parameterType="사용할 매개변수의 경로 / 기본자료형 사용 시 자료형"
                                            resultType="리턴값의 타입 경로 / 기본자료형 일 시 자료형">
                        #{매개변수명}
                    </마크업명>
                    ★ 주의점 : 매개변수로 받은 DTO 에 존재하지 않은 변수는 사용불가 / DTO 내 변수명과 동일하게 작성해야함 ★
                    ★ int 는 resultType 의 기본값으로 리턴값이 int 일 경우 resultType 생략가능 ★
                    ★ resultType 생략 시 자동을 SQL 이 처리한 레코드 수(int)를 반환함 ★

        [어노테이션 사용]
            - Mapper 인터페이스에서 SQL 매핑 어노테이션을 통해 매핑
            - 주로 간단한 SQL 문 작성 시 사용
            - XML 파일에 작성하는 것과 같이 #{변수명}을 통해 SQL 문 작성
            - 서브 쿼리 가능
            1. @Insert("SQL 문")
            2. @Select("SQL 문")
            3. @Update("SQL 문")
            4. @Delete("SQL 문")


[MyBatis 라이브러리 설치]
- start.spring.io 에서 MyBatis add 후 해당 코드 build.gradle 에 붙여넣기
[JDBC 라이브러리 설치]
- start.spring.io 에서 MysqlJDBC add 후 해당 코드 build.gradle 에 붙여넣기 (Spring 말고 그냥 JDBC)




