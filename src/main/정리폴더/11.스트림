[스트림(데이터가 다니는 통로)]
- 정의 : 데이터의 연속된 흐름을 처리하는 방식을 지원
    -> 주로 컬렉션 프레임워크와 많이 사용
- 목적
    1) 가독성 향상
    2) 간결한 코드 작성 가능
    등등~~~
- 스트림의 흐름
-----------------[stream]-----------------
value -중간연산-> value -중간연산-> value -최종연산-> <최종값 예] List<value, value>>
------------------------------------------
- 주요 연산 처리 방법
    1) 중간 연산 : 주로 데이터의 변경 또는 필터를 처리
        - .filter((매개변수명) -> 필터코드 ) : 필터 처리
        - .map((반복변수명) -> { return ; }) : 반복문 처리 ★ 구현 코드가 한줄일 경우 return 생략
        - .sorted() : 오름차순 정렬 (내림차순 정렬 : .sorted(Comparator.reverseOrder()))
        - .distinct()
        등등~~~
    2) 최종 연산 : 데이터의 결과를 반환
        - .forEach((반복변수명) -> 반복코드 ) ★ .forEach() 는 리턴을 제공하지 않음
        - .collect(Collectors.toXXX) : 리턴값을 toXXX 타입으로 반환 예] .collect(Collectors.toList)
        - .count()
        - .reduce()

    ★ !!! 근데 DB 에서 연산처리하는 게 더 좋음 !!! ★