[트랜잭션]
- 정의 : DB 에서 여러 연산(명령어)을 하나의 논리적인 작업 단위로 묶어주는 기능
- 목적 : 데이터의 신뢰성과 안정성을 위해 사용
    1) 데이터의 무결성 보장 => 여러 연산 중 중간에 실패 시 모두 실패 처리함
    2) 원자성 보장 => 여러 연산이 모두 성공해야 결과를 반영함
    3) 일관성 유지 => 트랜잭션 시작 전과 종료 후는 항상 일관된 상태임
    4) 독립성 / 격리성 => 다른 트랜잭션과는 서로 독립적임
- 용어
    1) Transaction : 트랜잭션
    2) commit  : 최종 완료
    3) rollback : 실패 시 돌아가기
- 사용예시
    1) 은행 이체
        예1]
        1번 계좌에서 100 만원 출금 ->
        (논리적 오류 발생 시 1번은 100 만원이 출금 O / 2번은 100만원 입금 X )
        -> 2번 계좌에게 100만원 입금
        ★ 이체라는 연산을 하나의 트랜젝션으로 처리해야함 ★

        예2]
        주문테이블 insert
        주문상세 테이블 insert
        (논리적 오류발생 시 주문 처리만 되고 재고 차감 X)
        주문 재고 테이블 insert
        ★ 주문이라는 연산을 하나로 처리해야함 ★

[스프링 트랜잭션 사요법]
- 트랜잭션은 주로 비즈니스로직(=Service : 실질적인 기능과 중요한 코드) 에서 처리
1. 비즈니스 로직에서 트랜잭션을 적용할 메소드 위에 @Transactional 어노테이션 주입
=> @Transactional : 트렌잭션을 적용 시키는 어노테이션
    - 발생조건 : RuntimeException
    - 해당 어노테이션을 주입한 SQL 에서 RuntimeException 발생 시 모두 rollback 됨
=> @Transactional(rollbackFor = Exception.class) 로 설정할 시 모든 예외클래스에 대한 롤백 가능










